// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kesko {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod sdf_model_loader {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Vec3, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec3(pub [u8; 12]);
impl Default for Vec3 { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Vec3 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec3")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec3 {}
impl<'a> flatbuffers::Follow<'a> for Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec3>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec3 {
    type Output = Vec3;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec3 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec3 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec3 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
    z: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Transform, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Transform(pub [u8; 36]);
impl Default for Transform { 
  fn default() -> Self { 
    Self([0; 36])
  }
}
impl core::fmt::Debug for Transform {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Transform")
      .field("translation", &self.translation())
      .field("rotation", &self.rotation())
      .field("scale", &self.scale())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Transform {}
impl<'a> flatbuffers::Follow<'a> for Transform {
  type Inner = &'a Transform;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Transform>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Transform {
  type Inner = &'a Transform;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Transform>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Transform {
    type Output = Transform;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Transform as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Transform {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Transform {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    translation: &Vec3,
    rotation: &Vec3,
    scale: &Vec3,
  ) -> Self {
    let mut s = Self([0; 36]);
    s.set_translation(translation);
    s.set_rotation(rotation);
    s.set_scale(scale);
    s
  }

  pub fn translation(&self) -> &Vec3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[0..].as_ptr() as *const Vec3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_translation(&mut self, x: &Vec3) {
    self.0[0..0 + 12].copy_from_slice(&x.0)
  }

  pub fn rotation(&self) -> &Vec3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[12..].as_ptr() as *const Vec3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_rotation(&mut self, x: &Vec3) {
    self.0[12..12 + 12].copy_from_slice(&x.0)
  }

  pub fn scale(&self) -> &Vec3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[24..].as_ptr() as *const Vec3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_scale(&mut self, x: &Vec3) {
    self.0[24..24 + 12].copy_from_slice(&x.0)
  }

}

pub enum SpawnSdfModelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpawnSdfModel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpawnSdfModel<'a> {
  type Inner = SpawnSdfModel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpawnSdfModel<'a> {
  pub const VT_SDF_PATH: flatbuffers::VOffsetT = 4;
  pub const VT_TRANSFORM: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpawnSdfModel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SpawnSdfModelArgs<'args>
  ) -> flatbuffers::WIPOffset<SpawnSdfModel<'bldr>> {
    let mut builder = SpawnSdfModelBuilder::new(_fbb);
    if let Some(x) = args.transform { builder.add_transform(x); }
    if let Some(x) = args.sdf_path { builder.add_sdf_path(x); }
    builder.finish()
  }


  #[inline]
  pub fn sdf_path(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpawnSdfModel::VT_SDF_PATH, None)}
  }
  #[inline]
  pub fn transform(&self) -> Option<&'a Transform> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Transform>(SpawnSdfModel::VT_TRANSFORM, None)}
  }
}

impl flatbuffers::Verifiable for SpawnSdfModel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sdf_path", Self::VT_SDF_PATH, false)?
     .visit_field::<Transform>("transform", Self::VT_TRANSFORM, false)?
     .finish();
    Ok(())
  }
}
pub struct SpawnSdfModelArgs<'a> {
    pub sdf_path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transform: Option<&'a Transform>,
}
impl<'a> Default for SpawnSdfModelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpawnSdfModelArgs {
      sdf_path: None,
      transform: None,
    }
  }
}

pub struct SpawnSdfModelBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpawnSdfModelBuilder<'a, 'b> {
  #[inline]
  pub fn add_sdf_path(&mut self, sdf_path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpawnSdfModel::VT_SDF_PATH, sdf_path);
  }
  #[inline]
  pub fn add_transform(&mut self, transform: &Transform) {
    self.fbb_.push_slot_always::<&Transform>(SpawnSdfModel::VT_TRANSFORM, transform);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpawnSdfModelBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpawnSdfModelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpawnSdfModel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpawnSdfModel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpawnSdfModel");
      ds.field("sdf_path", &self.sdf_path());
      ds.field("transform", &self.transform());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SpawnSdfModel`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spawn_sdf_model_unchecked`.
pub fn root_as_spawn_sdf_model(buf: &[u8]) -> Result<SpawnSdfModel, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SpawnSdfModel>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SpawnSdfModel` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_spawn_sdf_model_unchecked`.
pub fn size_prefixed_root_as_spawn_sdf_model(buf: &[u8]) -> Result<SpawnSdfModel, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SpawnSdfModel>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SpawnSdfModel` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spawn_sdf_model_unchecked`.
pub fn root_as_spawn_sdf_model_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpawnSdfModel<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SpawnSdfModel<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SpawnSdfModel` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spawn_sdf_model_unchecked`.
pub fn size_prefixed_root_as_spawn_sdf_model_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpawnSdfModel<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SpawnSdfModel<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SpawnSdfModel and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SpawnSdfModel`.
pub unsafe fn root_as_spawn_sdf_model_unchecked(buf: &[u8]) -> SpawnSdfModel {
  flatbuffers::root_unchecked::<SpawnSdfModel>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SpawnSdfModel and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SpawnSdfModel`.
pub unsafe fn size_prefixed_root_as_spawn_sdf_model_unchecked(buf: &[u8]) -> SpawnSdfModel {
  flatbuffers::size_prefixed_root_unchecked::<SpawnSdfModel>(buf)
}
pub const SPAWN_SDF_MODEL_IDENTIFIER: &str = "SLSP";

#[inline]
pub fn spawn_sdf_model_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SPAWN_SDF_MODEL_IDENTIFIER, false)
}

#[inline]
pub fn spawn_sdf_model_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SPAWN_SDF_MODEL_IDENTIFIER, true)
}

#[inline]
pub fn finish_spawn_sdf_model_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SpawnSdfModel<'a>>) {
  fbb.finish(root, Some(SPAWN_SDF_MODEL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_spawn_sdf_model_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<SpawnSdfModel<'a>>) {
  fbb.finish_size_prefixed(root, Some(SPAWN_SDF_MODEL_IDENTIFIER));
}
}  // pub mod sdf_model_loader
}  // pub mod kesko


// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kesko {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod placeholder_box {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Vec3, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec3(pub [u8; 12]);
impl Default for Vec3 { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Vec3 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec3")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec3 {}
impl<'a> flatbuffers::Follow<'a> for Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec3>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec3 {
    type Output = Vec3;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec3 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec3 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec3 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
    z: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Transform, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Transform(pub [u8; 36]);
impl Default for Transform { 
  fn default() -> Self { 
    Self([0; 36])
  }
}
impl core::fmt::Debug for Transform {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Transform")
      .field("translation", &self.translation())
      .field("rotation", &self.rotation())
      .field("scale", &self.scale())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Transform {}
impl<'a> flatbuffers::Follow<'a> for Transform {
  type Inner = &'a Transform;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Transform>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Transform {
  type Inner = &'a Transform;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Transform>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Transform {
    type Output = Transform;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Transform as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Transform {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Transform {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    translation: &Vec3,
    rotation: &Vec3,
    scale: &Vec3,
  ) -> Self {
    let mut s = Self([0; 36]);
    s.set_translation(translation);
    s.set_rotation(rotation);
    s.set_scale(scale);
    s
  }

  pub fn translation(&self) -> &Vec3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[0..].as_ptr() as *const Vec3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_translation(&mut self, x: &Vec3) {
    self.0[0..0 + 12].copy_from_slice(&x.0)
  }

  pub fn rotation(&self) -> &Vec3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[12..].as_ptr() as *const Vec3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_rotation(&mut self, x: &Vec3) {
    self.0[12..12 + 12].copy_from_slice(&x.0)
  }

  pub fn scale(&self) -> &Vec3 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[24..].as_ptr() as *const Vec3) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_scale(&mut self, x: &Vec3) {
    self.0[24..24 + 12].copy_from_slice(&x.0)
  }

}

pub enum SpawnPlaceholderBoxOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpawnPlaceholderBox<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpawnPlaceholderBox<'a> {
  type Inner = SpawnPlaceholderBox<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpawnPlaceholderBox<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_TRANSFORM: flatbuffers::VOffsetT = 6;
  pub const VT_COLOR: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpawnPlaceholderBox { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SpawnPlaceholderBoxArgs<'args>
  ) -> flatbuffers::WIPOffset<SpawnPlaceholderBox<'bldr>> {
    let mut builder = SpawnPlaceholderBoxBuilder::new(_fbb);
    if let Some(x) = args.color { builder.add_color(x); }
    if let Some(x) = args.transform { builder.add_transform(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpawnPlaceholderBox::VT_NAME, None)}
  }
  #[inline]
  pub fn transform(&self) -> Option<&'a Transform> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Transform>(SpawnPlaceholderBox::VT_TRANSFORM, None)}
  }
  #[inline]
  pub fn color(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(SpawnPlaceholderBox::VT_COLOR, None)}
  }
}

impl flatbuffers::Verifiable for SpawnPlaceholderBox<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<Transform>("transform", Self::VT_TRANSFORM, false)?
     .visit_field::<Vec3>("color", Self::VT_COLOR, false)?
     .finish();
    Ok(())
  }
}
pub struct SpawnPlaceholderBoxArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transform: Option<&'a Transform>,
    pub color: Option<&'a Vec3>,
}
impl<'a> Default for SpawnPlaceholderBoxArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpawnPlaceholderBoxArgs {
      name: None,
      transform: None,
      color: None,
    }
  }
}

pub struct SpawnPlaceholderBoxBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpawnPlaceholderBoxBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpawnPlaceholderBox::VT_NAME, name);
  }
  #[inline]
  pub fn add_transform(&mut self, transform: &Transform) {
    self.fbb_.push_slot_always::<&Transform>(SpawnPlaceholderBox::VT_TRANSFORM, transform);
  }
  #[inline]
  pub fn add_color(&mut self, color: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(SpawnPlaceholderBox::VT_COLOR, color);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpawnPlaceholderBoxBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpawnPlaceholderBoxBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpawnPlaceholderBox<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpawnPlaceholderBox<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpawnPlaceholderBox");
      ds.field("name", &self.name());
      ds.field("transform", &self.transform());
      ds.field("color", &self.color());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SpawnPlaceholderBox`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spawn_placeholder_box_unchecked`.
pub fn root_as_spawn_placeholder_box(buf: &[u8]) -> Result<SpawnPlaceholderBox, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SpawnPlaceholderBox>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SpawnPlaceholderBox` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_spawn_placeholder_box_unchecked`.
pub fn size_prefixed_root_as_spawn_placeholder_box(buf: &[u8]) -> Result<SpawnPlaceholderBox, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SpawnPlaceholderBox>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SpawnPlaceholderBox` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spawn_placeholder_box_unchecked`.
pub fn root_as_spawn_placeholder_box_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpawnPlaceholderBox<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SpawnPlaceholderBox<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SpawnPlaceholderBox` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spawn_placeholder_box_unchecked`.
pub fn size_prefixed_root_as_spawn_placeholder_box_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpawnPlaceholderBox<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SpawnPlaceholderBox<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SpawnPlaceholderBox and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SpawnPlaceholderBox`.
pub unsafe fn root_as_spawn_placeholder_box_unchecked(buf: &[u8]) -> SpawnPlaceholderBox {
  flatbuffers::root_unchecked::<SpawnPlaceholderBox>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SpawnPlaceholderBox and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SpawnPlaceholderBox`.
pub unsafe fn size_prefixed_root_as_spawn_placeholder_box_unchecked(buf: &[u8]) -> SpawnPlaceholderBox {
  flatbuffers::size_prefixed_root_unchecked::<SpawnPlaceholderBox>(buf)
}
#[inline]
pub fn finish_spawn_placeholder_box_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SpawnPlaceholderBox<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_spawn_placeholder_box_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<SpawnPlaceholderBox<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod placeholder_box
}  // pub mod kesko


// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kesko {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod placeholder_box {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ClearOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Clear<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Clear<'a> {
  type Inner = Clear<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Clear<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Clear { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args ClearArgs
  ) -> flatbuffers::WIPOffset<Clear<'bldr>> {
    let mut builder = ClearBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for Clear<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct ClearArgs {
}
impl<'a> Default for ClearArgs {
  #[inline]
  fn default() -> Self {
    ClearArgs {
    }
  }
}

pub struct ClearBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClearBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClearBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClearBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Clear<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Clear<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Clear");
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Clear`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_clear_unchecked`.
pub fn root_as_clear(buf: &[u8]) -> Result<Clear, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Clear>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Clear` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_clear_unchecked`.
pub fn size_prefixed_root_as_clear(buf: &[u8]) -> Result<Clear, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Clear>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Clear` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_clear_unchecked`.
pub fn root_as_clear_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Clear<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Clear<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Clear` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_clear_unchecked`.
pub fn size_prefixed_root_as_clear_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Clear<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Clear<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Clear and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Clear`.
pub unsafe fn root_as_clear_unchecked(buf: &[u8]) -> Clear {
  flatbuffers::root_unchecked::<Clear>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Clear and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Clear`.
pub unsafe fn size_prefixed_root_as_clear_unchecked(buf: &[u8]) -> Clear {
  flatbuffers::size_prefixed_root_unchecked::<Clear>(buf)
}
pub const CLEAR_IDENTIFIER: &str = "PBCL";

#[inline]
pub fn clear_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CLEAR_IDENTIFIER, false)
}

#[inline]
pub fn clear_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CLEAR_IDENTIFIER, true)
}

#[inline]
pub fn finish_clear_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Clear<'a>>) {
  fbb.finish(root, Some(CLEAR_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_clear_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Clear<'a>>) {
  fbb.finish_size_prefixed(root, Some(CLEAR_IDENTIFIER));
}
}  // pub mod placeholder_box
}  // pub mod kesko


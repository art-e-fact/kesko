# automatically generated by the FlatBuffers compiler, do not modify

# namespace: urdf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpawnUrdf(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpawnUrdf()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpawnUrdf(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SpawnUrdfBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x55\x52\x53\x50", size_prefixed=size_prefixed)

    # SpawnUrdf
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpawnUrdf
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from kesko.urdf.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpawnUrdf
    def UrdfPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpawnUrdf
    def PackageMappings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from kesko.urdf.PackageMap import PackageMap
            obj = PackageMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpawnUrdf
    def PackageMappingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpawnUrdf
    def PackageMappingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SpawnUrdfStart(builder):
    builder.StartObject(3)

def Start(builder):
    SpawnUrdfStart(builder)

def SpawnUrdfAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    SpawnUrdfAddPosition(builder, position)

def SpawnUrdfAddUrdfPath(builder, urdfPath):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(urdfPath), 0)

def AddUrdfPath(builder, urdfPath):
    SpawnUrdfAddUrdfPath(builder, urdfPath)

def SpawnUrdfAddPackageMappings(builder, packageMappings):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(packageMappings), 0)

def AddPackageMappings(builder, packageMappings):
    SpawnUrdfAddPackageMappings(builder, packageMappings)

def SpawnUrdfStartPackageMappingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPackageMappingsVector(builder, numElems: int) -> int:
    return SpawnUrdfStartPackageMappingsVector(builder, numElems)

def SpawnUrdfEnd(builder):
    return builder.EndObject()

def End(builder):
    return SpawnUrdfEnd(builder)
